import tensorflow as tf
import tensorflow.keras as tk
import nthmc

conf = nthmc.Conf(nbatch=1024, nepoch=1, nstepEpoch=1024, nstepMixing=64, stepPerTraj = 10,
  initDt=0.4, refreshOpt=False, checkReverse=False, nthr=4)
nthmc.setup(conf)
beta=2.25

action = nthmc.OneD(beta=beta, transform=nthmc.Ident())
loss = nthmc.LossFun(action, cCosDiff=1.0, cTopoDiff=1.0, dHmin=0.0, topoFourierN=1)
x0 = action.initState(conf.nbatch)
weights=list(map(lambda x:tf.constant(x,dtype=tf.float64),
 # 02f:"cy$@c:r!awk -v beta=2.25 '/^beta: /{b=$2} p>0{w=w "\n" $0} b==beta&&/^weights: /{p=1;w=$0} p==1&&/]$/{p=0} END{print w}' attic/t4.log
 [0.34406691292594005,
  beta]))
x1 = nthmc.runInfer(conf, action, loss, weights, x0, detail=False)

action = nthmc.OneD(beta=beta, transform=nthmc.TransformChain([
  nthmc.OneDNeighbor(mask='even'), nthmc.OneDNeighbor(mask='odd'),
  nthmc.OneDNeighbor(mask='even',distance=2), nthmc.OneDNeighbor(mask='odd',distance=2),
  nthmc.OneDNeighbor(mask='even',distance=4), nthmc.OneDNeighbor(mask='odd',distance=4),
  nthmc.OneDNeighbor(mask='even',distance=8), nthmc.OneDNeighbor(mask='odd',distance=8),
  nthmc.OneDNeighbor(mask='even',distance=16), nthmc.OneDNeighbor(mask='odd',distance=16),
  nthmc.OneDNeighbor(mask='even',distance=32), nthmc.OneDNeighbor(mask='odd',distance=32),
  nthmc.OneDNeighbor(mask='even',order=2), nthmc.OneDNeighbor(mask='odd',order=2),
  nthmc.OneDNeighbor(mask='even',order=2,distance=2), nthmc.OneDNeighbor(mask='odd',order=2,distance=2),
  nthmc.OneDNeighbor(mask='even',order=2,distance=4), nthmc.OneDNeighbor(mask='odd',order=2,distance=4),
  nthmc.OneDNeighbor(mask='even',order=2,distance=8), nthmc.OneDNeighbor(mask='odd',order=2,distance=8),
  nthmc.OneDNeighbor(mask='even',order=2,distance=16), nthmc.OneDNeighbor(mask='odd',order=2,distance=16),
  nthmc.OneDNeighbor(mask='even',order=2,distance=32), nthmc.OneDNeighbor(mask='odd',order=2,distance=32),
  nthmc.OneDNeighbor(mask='even',order=3), nthmc.OneDNeighbor(mask='odd',order=3),
  nthmc.OneDNeighbor(mask='even',order=3,distance=2), nthmc.OneDNeighbor(mask='odd',order=3,distance=2),
  nthmc.OneDNeighbor(mask='even',order=3,distance=4), nthmc.OneDNeighbor(mask='odd',order=3,distance=4),
  nthmc.OneDNeighbor(mask='even',order=3,distance=8), nthmc.OneDNeighbor(mask='odd',order=3,distance=8),
  nthmc.OneDNeighbor(mask='even',order=3,distance=16), nthmc.OneDNeighbor(mask='odd',order=3,distance=16),
  nthmc.OneDNeighbor(mask='even',order=3,distance=32), nthmc.OneDNeighbor(mask='odd',order=3,distance=32),
  nthmc.OneDNeighbor(mask='even',order=4), nthmc.OneDNeighbor(mask='odd',order=4),
  nthmc.OneDNeighbor(mask='even',order=4,distance=2), nthmc.OneDNeighbor(mask='odd',order=4,distance=2),
  nthmc.OneDNeighbor(mask='even',order=4,distance=4), nthmc.OneDNeighbor(mask='odd',order=4,distance=4),
  nthmc.OneDNeighbor(mask='even',order=4,distance=8), nthmc.OneDNeighbor(mask='odd',order=4,distance=8),
  nthmc.OneDNeighbor(mask='even',order=4,distance=16), nthmc.OneDNeighbor(mask='odd',order=4,distance=16),
  nthmc.OneDNeighbor(mask='even',order=4,distance=32), nthmc.OneDNeighbor(mask='odd',order=4,distance=32),
  nthmc.OneDNeighbor(mask='even'), nthmc.OneDNeighbor(mask='odd'),
  nthmc.OneDNeighbor(mask='even',distance=2), nthmc.OneDNeighbor(mask='odd',distance=2),
  nthmc.OneDNeighbor(mask='even',distance=4), nthmc.OneDNeighbor(mask='odd',distance=4),
  nthmc.OneDNeighbor(mask='even',distance=8), nthmc.OneDNeighbor(mask='odd',distance=8),
  nthmc.OneDNeighbor(mask='even',distance=16), nthmc.OneDNeighbor(mask='odd',distance=16),
  nthmc.OneDNeighbor(mask='even',distance=32), nthmc.OneDNeighbor(mask='odd',distance=32),
  nthmc.OneDNeighbor(mask='even',order=2), nthmc.OneDNeighbor(mask='odd',order=2),
  nthmc.OneDNeighbor(mask='even',order=2,distance=2), nthmc.OneDNeighbor(mask='odd',order=2,distance=2),
  nthmc.OneDNeighbor(mask='even',order=2,distance=4), nthmc.OneDNeighbor(mask='odd',order=2,distance=4),
  nthmc.OneDNeighbor(mask='even',order=2,distance=8), nthmc.OneDNeighbor(mask='odd',order=2,distance=8),
  nthmc.OneDNeighbor(mask='even',order=2,distance=16), nthmc.OneDNeighbor(mask='odd',order=2,distance=16),
  nthmc.OneDNeighbor(mask='even',order=2,distance=32), nthmc.OneDNeighbor(mask='odd',order=2,distance=32),
  nthmc.OneDNeighbor(mask='even',order=3), nthmc.OneDNeighbor(mask='odd',order=3),
  nthmc.OneDNeighbor(mask='even',order=3,distance=2), nthmc.OneDNeighbor(mask='odd',order=3,distance=2),
  nthmc.OneDNeighbor(mask='even',order=3,distance=4), nthmc.OneDNeighbor(mask='odd',order=3,distance=4),
  nthmc.OneDNeighbor(mask='even',order=3,distance=8), nthmc.OneDNeighbor(mask='odd',order=3,distance=8),
  nthmc.OneDNeighbor(mask='even',order=3,distance=16), nthmc.OneDNeighbor(mask='odd',order=3,distance=16),
  nthmc.OneDNeighbor(mask='even',order=3,distance=32), nthmc.OneDNeighbor(mask='odd',order=3,distance=32),
  nthmc.OneDNeighbor(mask='even',order=4), nthmc.OneDNeighbor(mask='odd',order=4),
  nthmc.OneDNeighbor(mask='even',order=4,distance=2), nthmc.OneDNeighbor(mask='odd',order=4,distance=2),
  nthmc.OneDNeighbor(mask='even',order=4,distance=4), nthmc.OneDNeighbor(mask='odd',order=4,distance=4),
  nthmc.OneDNeighbor(mask='even',order=4,distance=8), nthmc.OneDNeighbor(mask='odd',order=4,distance=8),
  nthmc.OneDNeighbor(mask='even',order=4,distance=16), nthmc.OneDNeighbor(mask='odd',order=4,distance=16),
  nthmc.OneDNeighbor(mask='even',order=4,distance=32), nthmc.OneDNeighbor(mask='odd',order=4,distance=32),
]))
loss = nthmc.LossFun(action, cCosDiff=1.0, cTopoDiff=1.0, dHmin=0.0, topoFourierN=1)
weights=list(map(lambda x:tf.constant(x,dtype=tf.float64),
 # 02f:"cy$@c:r!awk -v beta=2.25 '/^beta: /{b=$2} p>0{w=w "\n" $0} b==beta&&/^weights: /{p=1;w=$0} p==1&&/]$/{p=0} END{print w}' t13.log
 [0.46347687013765859,
 -0.26956096774378285,
 -0.27789613752492937,
 0.00057889370538809464,
 -0.010236247423671241,
 0.0986786428228265,
 0.092940163183728317,
 0.048389783664764645,
 0.0428352067197632,
 0.0071532724177343155,
 -0.00016729900977585887,
 -0.0028994954411082729,
 0.0045629145744148841,
 0.10429797985901097,
 0.10516664327725961,
 0.019767444998128367,
 0.017733344833014579,
 -0.015701195405613568,
 -0.01627707909725213,
 6.1961085874725515e-05,
 -0.002726021972288098,
 0.0030387605699716638,
 -0.00086939916322049775,
 -0.0025294217069669156,
 0.0023162394059350229,
 -0.018197955042421207,
 -0.013156170877580465,
 -0.00018828285523644493,
 0.00035738065232948939,
 0.0020460184320699173,
 0.0037571145249259536,
 0.0014847460163292033,
 0.0033975025807476992,
 -0.0016427361682365381,
 -0.00015240892204221136,
 -0.00061298149379606509,
 -0.00070245629535897747,
 0.0049699308711759595,
 0.0023881065458685458,
 -0.002674100400855986,
 -0.0046840431297724182,
 -0.00051660018705215922,
 -0.0015122462571267373,
 0.0013658719371077899,
 0.0024371537034333477,
 -0.00076388891331814345,
 0.0010928852937978671,
 -0.00063912955260809286,
 -0.00046236360307934886,
 -0.26720377121779987,
 -0.27506659960565666,
 0.01386921185779756,
 0.0011223971294072746,
 0.10399309089493593,
 0.097402127070597852,
 0.049035774754181,
 0.043470613107106586,
 0.0070195040443017734,
 -0.00064125419449594372,
 -0.0041663105190666537,
 0.0052679329287449823,
 0.07955487719732092,
 0.077760535424142033,
 0.045023185143905242,
 0.0424627085709664,
 -0.012423562741718689,
 -0.011645230113129405,
 -0.00040397146191294077,
 -0.0039211539692662672,
 0.0044111294783447065,
 -0.00095582047069014779,
 -0.0011982494863965673,
 0.0026672427895575112,
 -0.036791369866543647,
 -0.030221714902313849,
 -0.020408567524268454,
 -0.019107255766985697,
 0.0011009778452924061,
 0.0031477494894678764,
 0.00014733642473982873,
 0.00060935472443990151,
 -0.0010207202054904839,
 0.0013049792966303229,
 -0.00073578299790926221,
 -0.000648657507138662,
 0.01345683484018945,
 0.00983366514694654,
 0.0063690140656229343,
 0.0048874399190401109,
 0.00081988498166550778,
 -0.00083428871571166992,
 -0.0014618929691323291,
 -0.00054592505558324141,
 -0.0012395250586266766,
 0.00018205333858756673,
 0.00068928868823799028,
 -7.0524701673341993e-05,
 beta]))
nthmc.runInfer(conf, action, loss, weights, x1, detail=False)
