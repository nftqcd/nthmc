import tensorflow as tf
import tensorflow.keras as tk
import nthmc

conf = nthmc.Conf(nbatch=1, nepoch=1, nstepEpoch=1024, nstepMixing=64, stepPerTraj = 10,
  initDt=0.4, refreshOpt=False, checkReverse=False, nthr=4)
nthmc.setup(conf)
beta=3.5

action = nthmc.OneD(beta=beta, transform=nthmc.Ident())
loss = nthmc.LossFun(action, cCosDiff=1.0, cTopoDiff=1.0, dHmin=0.0, topoFourierN=1)
weights=list(map(lambda x:tf.constant(x,dtype=tf.float64),
 # 02f:"cy$@c:r!awk -v beta=3.5 '/^beta: /{b=$2} p>0{w=w "\n" $0} b==beta&&/^weights: /{p=1;w=$0} p==1&&/]$/{p=0} END{print w}' attic/t4.log
 [0.268831031592305,
  beta]))
nthmc.showTransform(conf, action, loss, weights)

action = nthmc.OneD(beta=beta, transform=nthmc.TransformChain([
  nthmc.OneDNeighbor(mask='even'), nthmc.OneDNeighbor(mask='odd'),
  nthmc.OneDNeighbor(mask='even',distance=2), nthmc.OneDNeighbor(mask='odd',distance=2),
  nthmc.OneDNeighbor(mask='even',distance=4), nthmc.OneDNeighbor(mask='odd',distance=4),
  nthmc.OneDNeighbor(mask='even',distance=8), nthmc.OneDNeighbor(mask='odd',distance=8),
  nthmc.OneDNeighbor(mask='even',distance=16), nthmc.OneDNeighbor(mask='odd',distance=16),
  nthmc.OneDNeighbor(mask='even',distance=32), nthmc.OneDNeighbor(mask='odd',distance=32),
  nthmc.OneDNeighbor(mask='even',order=2), nthmc.OneDNeighbor(mask='odd',order=2),
  nthmc.OneDNeighbor(mask='even',order=2,distance=2), nthmc.OneDNeighbor(mask='odd',order=2,distance=2),
  nthmc.OneDNeighbor(mask='even',order=2,distance=4), nthmc.OneDNeighbor(mask='odd',order=2,distance=4),
  nthmc.OneDNeighbor(mask='even',order=2,distance=8), nthmc.OneDNeighbor(mask='odd',order=2,distance=8),
  nthmc.OneDNeighbor(mask='even',order=2,distance=16), nthmc.OneDNeighbor(mask='odd',order=2,distance=16),
  nthmc.OneDNeighbor(mask='even',order=2,distance=32), nthmc.OneDNeighbor(mask='odd',order=2,distance=32),
  nthmc.OneDNeighbor(mask='even',order=3), nthmc.OneDNeighbor(mask='odd',order=3),
  nthmc.OneDNeighbor(mask='even',order=3,distance=2), nthmc.OneDNeighbor(mask='odd',order=3,distance=2),
  nthmc.OneDNeighbor(mask='even',order=3,distance=4), nthmc.OneDNeighbor(mask='odd',order=3,distance=4),
  nthmc.OneDNeighbor(mask='even',order=3,distance=8), nthmc.OneDNeighbor(mask='odd',order=3,distance=8),
  nthmc.OneDNeighbor(mask='even',order=3,distance=16), nthmc.OneDNeighbor(mask='odd',order=3,distance=16),
  nthmc.OneDNeighbor(mask='even',order=3,distance=32), nthmc.OneDNeighbor(mask='odd',order=3,distance=32),
  nthmc.OneDNeighbor(mask='even',order=4), nthmc.OneDNeighbor(mask='odd',order=4),
  nthmc.OneDNeighbor(mask='even',order=4,distance=2), nthmc.OneDNeighbor(mask='odd',order=4,distance=2),
  nthmc.OneDNeighbor(mask='even',order=4,distance=4), nthmc.OneDNeighbor(mask='odd',order=4,distance=4),
  nthmc.OneDNeighbor(mask='even',order=4,distance=8), nthmc.OneDNeighbor(mask='odd',order=4,distance=8),
  nthmc.OneDNeighbor(mask='even',order=4,distance=16), nthmc.OneDNeighbor(mask='odd',order=4,distance=16),
  nthmc.OneDNeighbor(mask='even',order=4,distance=32), nthmc.OneDNeighbor(mask='odd',order=4,distance=32),
  nthmc.OneDNeighbor(mask='even'), nthmc.OneDNeighbor(mask='odd'),
  nthmc.OneDNeighbor(mask='even',distance=2), nthmc.OneDNeighbor(mask='odd',distance=2),
  nthmc.OneDNeighbor(mask='even',distance=4), nthmc.OneDNeighbor(mask='odd',distance=4),
  nthmc.OneDNeighbor(mask='even',distance=8), nthmc.OneDNeighbor(mask='odd',distance=8),
  nthmc.OneDNeighbor(mask='even',distance=16), nthmc.OneDNeighbor(mask='odd',distance=16),
  nthmc.OneDNeighbor(mask='even',distance=32), nthmc.OneDNeighbor(mask='odd',distance=32),
  nthmc.OneDNeighbor(mask='even',order=2), nthmc.OneDNeighbor(mask='odd',order=2),
  nthmc.OneDNeighbor(mask='even',order=2,distance=2), nthmc.OneDNeighbor(mask='odd',order=2,distance=2),
  nthmc.OneDNeighbor(mask='even',order=2,distance=4), nthmc.OneDNeighbor(mask='odd',order=2,distance=4),
  nthmc.OneDNeighbor(mask='even',order=2,distance=8), nthmc.OneDNeighbor(mask='odd',order=2,distance=8),
  nthmc.OneDNeighbor(mask='even',order=2,distance=16), nthmc.OneDNeighbor(mask='odd',order=2,distance=16),
  nthmc.OneDNeighbor(mask='even',order=2,distance=32), nthmc.OneDNeighbor(mask='odd',order=2,distance=32),
  nthmc.OneDNeighbor(mask='even',order=3), nthmc.OneDNeighbor(mask='odd',order=3),
  nthmc.OneDNeighbor(mask='even',order=3,distance=2), nthmc.OneDNeighbor(mask='odd',order=3,distance=2),
  nthmc.OneDNeighbor(mask='even',order=3,distance=4), nthmc.OneDNeighbor(mask='odd',order=3,distance=4),
  nthmc.OneDNeighbor(mask='even',order=3,distance=8), nthmc.OneDNeighbor(mask='odd',order=3,distance=8),
  nthmc.OneDNeighbor(mask='even',order=3,distance=16), nthmc.OneDNeighbor(mask='odd',order=3,distance=16),
  nthmc.OneDNeighbor(mask='even',order=3,distance=32), nthmc.OneDNeighbor(mask='odd',order=3,distance=32),
  nthmc.OneDNeighbor(mask='even',order=4), nthmc.OneDNeighbor(mask='odd',order=4),
  nthmc.OneDNeighbor(mask='even',order=4,distance=2), nthmc.OneDNeighbor(mask='odd',order=4,distance=2),
  nthmc.OneDNeighbor(mask='even',order=4,distance=4), nthmc.OneDNeighbor(mask='odd',order=4,distance=4),
  nthmc.OneDNeighbor(mask='even',order=4,distance=8), nthmc.OneDNeighbor(mask='odd',order=4,distance=8),
  nthmc.OneDNeighbor(mask='even',order=4,distance=16), nthmc.OneDNeighbor(mask='odd',order=4,distance=16),
  nthmc.OneDNeighbor(mask='even',order=4,distance=32), nthmc.OneDNeighbor(mask='odd',order=4,distance=32),
]))
loss = nthmc.LossFun(action, cCosDiff=1.0, cTopoDiff=1.0, dHmin=0.0, topoFourierN=1)

# 02f:"cy$@c:r!awk '/^beta/{print} p>0{w=w "\n" $0} b==beta&&/^weights/{p=1;w=$0} p==1&&/]\)\)$/{p=0} END{print w}' i7.py
beta=1.625
weights=list(map(lambda x:tf.constant(x,dtype=tf.float64),
 # 02f:"cy$@c:r!awk -v beta=1.625 '/^beta: /{b=$2} p>0{w=w "\n" $0} b==beta&&/^weights: /{p=1;w=$0} p==1&&/]$/{p=0} END{print w}' t13.log
 [0.39928005894476953,
 -0.16646589446724119,
 -0.165116196190377,
 0.030407332523959697,
 0.030213236259768468,
 0.079470890222058513,
 0.0761346381697804,
 0.029619192505227931,
 0.030915611020612837,
 0.00403555847393147,
 0.00407719851568374,
 -0.00060822007493423636,
 0.0037353011339751178,
 0.069686089040409807,
 0.070473588467025811,
 0.033146255849164606,
 0.033379928079238383,
 -0.0029161974044230022,
 -0.0017224631344893938,
 -0.00069061113081232792,
 -0.0016410929512909317,
 0.0016876364859234507,
 -0.000733623769599814,
 0.0014529279510181758,
 -0.00091449778170147266,
 -0.019901824910881289,
 -0.017959584894213086,
 -0.0059090578292857058,
 -0.0054266495233532761,
 0.0013726690186972,
 0.00021210992451173647,
 -0.0001498695177544983,
 0.00064305655082401761,
 0.0010931278372980787,
 0.00037689345534901728,
 -0.0014984995098818561,
 -0.00040476075088637781,
 0.0046935831026250876,
 0.0032850096553108288,
 -0.00054541015203022974,
 -0.0014208086412517168,
 -0.0002359329393992865,
 -0.00035542688976354463,
 -1.2157678571547889e-05,
 0.00015490831515802204,
 -0.00076950136336040114,
 -0.00031333861450947426,
 5.097857409197952e-05,
 -0.00012148501847680332,
 -0.16518081785315231,
 -0.16337905450177662,
 0.035184121942295171,
 0.034570717385232527,
 0.080465773703933,
 0.0774896127221109,
 0.02912121009107339,
 0.030940522095703058,
 0.0043964429072142538,
 0.0040451007928214251,
 -0.00080468042839712994,
 0.0035457375499732395,
 0.06101007963274057,
 0.061368775130318916,
 0.042444107322532766,
 0.0429949487047859,
 -0.0027232705295604813,
 -0.0012932981224013512,
 -0.000984564284924616,
 -0.0024456764643747803,
 0.0015834011617584004,
 -0.00090531730999972814,
 0.0017613431423082497,
 -0.0012386881834937134,
 -0.023626271538814435,
 -0.021598075508490612,
 -0.012897707141515927,
 -0.012881432717533042,
 0.0014793362615386902,
 9.2105145307772054e-06,
 -0.00020941704974683913,
 0.00023779728215206694,
 0.0014388740734254534,
 0.00038662450216112368,
 -0.0012415944776245824,
 -5.7876896633756865e-05,
 0.00847176568981238,
 0.00680656254828831,
 0.0038699954560532414,
 0.002672203307567224,
 -0.00032310477908741877,
 -0.00027817807890187128,
 2.9749369975343604e-07,
 0.00056912541337158064,
 -0.00016832076473673023,
 -6.8163634028702889e-05,
 0.00038894121879160768,
 0.00021929053651325786,
 beta]))
tf.print('beta: ',beta)
nthmc.showTransform(conf, action, loss, weights)

# 02f:"cy$@c:r!awk '/^beta/{print} p>0{w=w "\n" $0} b==beta&&/^weights/{p=1;w=$0} p==1&&/]\)\)$/{p=0} END{print w}' i8.py
beta=2.25
weights=list(map(lambda x:tf.constant(x,dtype=tf.float64),
 # 02f:"cy$@c:r!awk -v beta=2.25 '/^beta: /{b=$2} p>0{w=w "\n" $0} b==beta&&/^weights: /{p=1;w=$0} p==1&&/]$/{p=0} END{print w}' t13.log
 [0.46347687013765859,
 -0.26956096774378285,
 -0.27789613752492937,
 0.00057889370538809464,
 -0.010236247423671241,
 0.0986786428228265,
 0.092940163183728317,
 0.048389783664764645,
 0.0428352067197632,
 0.0071532724177343155,
 -0.00016729900977585887,
 -0.0028994954411082729,
 0.0045629145744148841,
 0.10429797985901097,
 0.10516664327725961,
 0.019767444998128367,
 0.017733344833014579,
 -0.015701195405613568,
 -0.01627707909725213,
 6.1961085874725515e-05,
 -0.002726021972288098,
 0.0030387605699716638,
 -0.00086939916322049775,
 -0.0025294217069669156,
 0.0023162394059350229,
 -0.018197955042421207,
 -0.013156170877580465,
 -0.00018828285523644493,
 0.00035738065232948939,
 0.0020460184320699173,
 0.0037571145249259536,
 0.0014847460163292033,
 0.0033975025807476992,
 -0.0016427361682365381,
 -0.00015240892204221136,
 -0.00061298149379606509,
 -0.00070245629535897747,
 0.0049699308711759595,
 0.0023881065458685458,
 -0.002674100400855986,
 -0.0046840431297724182,
 -0.00051660018705215922,
 -0.0015122462571267373,
 0.0013658719371077899,
 0.0024371537034333477,
 -0.00076388891331814345,
 0.0010928852937978671,
 -0.00063912955260809286,
 -0.00046236360307934886,
 -0.26720377121779987,
 -0.27506659960565666,
 0.01386921185779756,
 0.0011223971294072746,
 0.10399309089493593,
 0.097402127070597852,
 0.049035774754181,
 0.043470613107106586,
 0.0070195040443017734,
 -0.00064125419449594372,
 -0.0041663105190666537,
 0.0052679329287449823,
 0.07955487719732092,
 0.077760535424142033,
 0.045023185143905242,
 0.0424627085709664,
 -0.012423562741718689,
 -0.011645230113129405,
 -0.00040397146191294077,
 -0.0039211539692662672,
 0.0044111294783447065,
 -0.00095582047069014779,
 -0.0011982494863965673,
 0.0026672427895575112,
 -0.036791369866543647,
 -0.030221714902313849,
 -0.020408567524268454,
 -0.019107255766985697,
 0.0011009778452924061,
 0.0031477494894678764,
 0.00014733642473982873,
 0.00060935472443990151,
 -0.0010207202054904839,
 0.0013049792966303229,
 -0.00073578299790926221,
 -0.000648657507138662,
 0.01345683484018945,
 0.00983366514694654,
 0.0063690140656229343,
 0.0048874399190401109,
 0.00081988498166550778,
 -0.00083428871571166992,
 -0.0014618929691323291,
 -0.00054592505558324141,
 -0.0012395250586266766,
 0.00018205333858756673,
 0.00068928868823799028,
 -7.0524701673341993e-05,
 beta]))
tf.print('beta: ',beta)
nthmc.showTransform(conf, action, loss, weights)

# 02f:"cy$@c:r!awk '/^beta/{print} p>0{w=w "\n" $0} b==beta&&/^weights/{p=1;w=$0} p==1&&/]\)\)$/{p=0} END{print w}' i9.py
beta=2.875
weights=list(map(lambda x:tf.constant(x,dtype=tf.float64),
 # 02f:"cy$@c:r!awk -v beta=2.875 '/^beta: /{b=$2} p>0{w=w "\n" $0} b==beta&&/^weights: /{p=1;w=$0} p==1&&/]$/{p=0} END{print w}' t13.log
 [0.45615090724163854,
 -0.31097787822669354,
 -0.30507920463515187,
 -0.027893016314395284,
 -0.031378845400177963,
 0.077689083215770949,
 0.075569715367494641,
 0.038699510620482935,
 0.029162385005325472,
 0.0019581497708284694,
 -0.0018231287462758918,
 0.00015888456785728626,
 -0.0028210982286725086,
 0.13124240382350402,
 0.13309785933956725,
 0.017604137564691036,
 0.010907674928860149,
 -0.013780037257168396,
 -0.022445109691812258,
 -0.0045229710423886765,
 -0.0029058196749805151,
 0.0023048449953337728,
 -0.0070235509174246284,
 -0.0014313775421141036,
 0.00081176147554258083,
 -0.014710030999330952,
 -0.010194100966722035,
 0.002744086282626448,
 0.0045756447355585093,
 0.0031292945016411365,
 0.0031592597427928843,
 0.00053880411453796249,
 -0.00058044090213579173,
 0.00095364836258577637,
 -0.0028807214952762316,
 0.0018107008839567691,
 -0.0013583732862177305,
 0.0046931380657292757,
 0.0016671741461710527,
 -0.0031238965035703696,
 -0.0030495300374729362,
 3.7767171335432319e-05,
 0.00034506965785394356,
 -9.8650513910624843e-05,
 0.00084275179037986137,
 0.0012699466261455849,
 0.0012800734726210016,
 0.00078495081260056656,
 -3.6750708339015154e-05,
 -0.31014396639255265,
 -0.3045858543098458,
 -0.010885776010155591,
 -0.015750481987926623,
 0.087259089367838744,
 0.08243283014988155,
 0.040517512492184569,
 0.030525468606565239,
 0.0025872352327758539,
 -0.0027206505719563493,
 -0.00089873373216705352,
 -0.0018318661211866342,
 0.0967308932840898,
 0.095883079309349514,
 0.047763637063773574,
 0.041546863771405255,
 -0.012530825072081196,
 -0.020478495148529022,
 -0.0067227151927674068,
 -0.0052179264725507176,
 0.00418665071041997,
 -0.00771130055753064,
 -0.0013408242290686503,
 0.00065100724836321812,
 -0.040842057940541958,
 -0.03514844539463631,
 -0.025181375323195351,
 -0.023134536637470358,
 0.00242366467545387,
 0.002806728633386199,
 0.00060494371667193494,
 -0.0040390056771061368,
 0.0011595645810642834,
 0.00015374946003506677,
 0.00012011293019308769,
 -0.0021145331363914585,
 0.016401183428638843,
 0.011602504263125767,
 0.0076990960462810717,
 0.0077484140578621538,
 1.1511413473662876e-05,
 0.0011462119410679498,
 -0.0011556563594443477,
 -0.00057730440795531726,
 -0.0018027637615355017,
 -0.0021347460580807263,
 0.00058925948384115634,
 -0.0010558414842687634,
 beta]))
tf.print('beta: ',beta)
nthmc.showTransform(conf, action, loss, weights)

# 02f:"cy$@c:r!awk '/^beta/{print} p>0{w=w "\n" $0} b==beta&&/^weights/{p=1;w=$0} p==1&&/]\)\)$/{p=0} END{print w}' i10.py
beta=3.5
weights=list(map(lambda x:tf.constant(x,dtype=tf.float64),
 # 02f:"cy$@c:r!awk -v beta=3.5 '/^beta: /{b=$2} p>0{w=w "\n" $0} b==beta&&/^weights: /{p=1;w=$0} p==1&&/]$/{p=0} END{print w}' t13.log
 [0.426161809940765,
 -0.320109120400013,
 -0.32090020243824952,
 -0.031182716984891851,
 -0.036169773339796464,
 0.055714318919392686,
 0.057602389890724234,
 0.029411886986087127,
 0.02048733243498738,
 0.00094839455227904755,
 -0.003336858749749962,
 0.0042831810194401618,
 0.0055589091837478805,
 0.1523380013134244,
 0.15163036003180105,
 0.017450942775123303,
 0.01366963403033924,
 -0.015362176729137129,
 -0.023842410298148348,
 -0.0077312457934894819,
 -0.0013628219442876222,
 0.0011295376199805572,
 -0.00091410054524127253,
 -0.00059341864473508234,
 0.0025111964348351304,
 -0.016444424617664447,
 -0.015570829270105238,
 0.0019647033660882846,
 0.0059393613468408137,
 0.0064600167032926427,
 0.004736273804986227,
 0.0022333630983046664,
 -0.0011657888127998832,
 0.00019669260733786145,
 -0.0030779286401902473,
 0.002774947111944009,
 -9.6433938335267359e-05,
 0.0083785133367789,
 0.0053008391565818914,
 -0.0014080778872983919,
 -0.0024396905236594682,
 -0.0015531026667714104,
 -0.0015796761344081557,
 -0.0012537334878866919,
 -0.0015042727436904697,
 0.0011413533343287735,
 0.00097227804515090984,
 -0.00046677598847423714,
 0.00063556338329312273,
 -0.32071868062103076,
 -0.32148180159296041,
 -0.00986116406882059,
 -0.017335584106134748,
 0.068029369690636679,
 0.066918020242658541,
 0.030819349510999603,
 0.023206203501044503,
 0.0017779135561217525,
 -0.0034133032476216588,
 0.002189343578032792,
 0.00656004530207795,
 0.11256550758203428,
 0.11055222402865708,
 0.049446153758141626,
 0.045658985887769253,
 -0.017581715497940329,
 -0.026933901536123416,
 -0.011986081801134148,
 -0.0048059039456269485,
 0.0017878663762805563,
 -0.0025517310832571327,
 0.00019610673621250042,
 0.003797903258295098,
 -0.04866943996936729,
 -0.045885640197634261,
 -0.030946502446712494,
 -0.025988143680184862,
 0.0058739799141497131,
 0.0044195418882953643,
 0.0029309881330323194,
 -0.0042307734485617391,
 -0.000379102785780568,
 -0.00042006608019470941,
 -0.000890702512832992,
 -0.0015533078274466545,
 0.018431797429963044,
 0.01296582266989706,
 0.0083730807637790484,
 0.0071470949531473186,
 -0.0006280677552497352,
 0.00086911341441850648,
 -0.00011310686430592162,
 0.0010197384364829679,
 -0.00042664791705881658,
 -0.00060594003312396886,
 8.3595033525653663e-05,
 -0.00070533166824918961,
 beta]))
tf.print('beta: ',beta)
nthmc.showTransform(conf, action, loss, weights)
